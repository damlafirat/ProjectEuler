using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;

namespace Problem_12___Highly_divisible_triangular_numb
{
    class Program
    {
        /*
         * Highly divisible triangular numb
         * Problem 12
         * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
         * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
         * Let us list the factors of the first seven triangle numbers:
         * 1: 1
         * 3: 1,3
         * 6: 1,2,3,6
         * 10: 1,2,5,10
         * 15: 1,3,5,15
         * 21: 1,3,7,21
         * 28: 1,2,4,7,14,28
         * We can see that 28 is the first triangle number to have over five divisors.
         * What is the value of the first triangle number to have over five hundred divisors?
         */

        static void Main(string[] args)
        {
            foreach (var item in generateTriangleNumbers())
            {
                Console.WriteLine(item + "\t" + findDivisors(item).Count);

                if (findDivisors(item).Count >= 500)
                {
                    break;
                }
            }

            Console.ReadLine();
        }

        private static List<BigInteger> findDivisors(BigInteger v)
        {
            List<BigInteger> divisorsList = new List<BigInteger>();

            for (BigInteger i = 1; i <= v; i++)
            {
                if (v % i == 0)
                    divisorsList.Add(i);

                else
                    continue;
            }

            return divisorsList;
        }

        private static List<BigInteger> generateTriangleNumbers()
        {
            List<BigInteger> triangleNumList = new List<BigInteger>();

            for (BigInteger i = 1; i < 1000000 ; i++)
            {
                BigInteger sum = 0;

                for (BigInteger j = 1; j <= i; j++)
                {
                    sum += j;
                }

                triangleNumList.Add(sum);
            }

            return triangleNumList;
        }
    }
}
